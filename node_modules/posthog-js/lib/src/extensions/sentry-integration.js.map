{"version":3,"file":"sentry-integration.js","sourceRoot":"","sources":["../../../src/extensions/sentry-integration.ts"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;GAgBG;AA0BH,+FAA+F;AAC/F,iFAAiF;AACjF,IAAM,cAAc,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,EAAE,OAAO,CAAU,CAAA;AAYrF;IAQI,2BACI,QAAiB,EACjB,YAAqB,EACrB,SAAkB,EAClB,MAAe;IACf;;;;;;OAMG;IACH,iBAAqD;QAArD,kCAAA,EAAA,qBAA6C,OAAO,CAAC;QAErD,gEAAgE;QAChE,IAAI,CAAC,IAAI,GAAG,YAAY,CAAA;QACxB,IAAI,CAAC,SAAS,GAAG,UAAU,uBAAkE;YACzF,uBAAuB,CAAC,UAAC,KAAmB;;gBACxC,IAAM,kBAAkB,GACpB,iBAAiB,KAAK,GAAG,IAAI,iBAAiB,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAuB,CAAC,CAAA;gBAC1F,IAAI,CAAC,kBAAkB,IAAI,CAAC,QAAQ,CAAC,QAAQ;oBAAE,OAAO,KAAK,CAAA;gBAC3D,IAAI,CAAC,KAAK,CAAC,IAAI;oBAAE,KAAK,CAAC,IAAI,GAAG,EAAE,CAAA;gBAEhC,IAAM,SAAS,GAAG,QAAQ,CAAC,aAAa,CAAC,WAAW,CAChD,IAAI,EACJ,mBAAY,QAAQ,CAAC,MAAM,CAAC,KAAK,qBAAW,QAAQ,CAAC,eAAe,EAAE,CAAE,CAC3E,CAAA;gBACD,KAAK,CAAC,IAAI,CAAC,oBAAoB,CAAC,GAAG,SAAS,CAAA;gBAC5C,IAAI,QAAQ,CAAC,uBAAuB,EAAE,EAAE;oBACpC,KAAK,CAAC,IAAI,CAAC,uBAAuB,CAAC,GAAG,QAAQ,CAAC,sBAAsB,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAA;iBACjG;gBAED,IAAM,UAAU,GAAG,CAAA,MAAA,KAAK,CAAC,SAAS,0CAAE,MAAM,KAAI,EAAE,CAAA;gBAEhD,IAAM,IAAI,GAON;oBACA,gCAAgC;oBAChC,kBAAkB,EAAE,CAAA,MAAA,UAAU,CAAC,CAAC,CAAC,0CAAE,KAAK,KAAI,KAAK,CAAC,OAAO;oBACzD,eAAe,EAAE,MAAA,UAAU,CAAC,CAAC,CAAC,0CAAE,IAAI;oBACpC,oBAAoB,EAAE,SAAS;oBAC/B,8BAA8B;oBAC9B,gBAAgB,EAAE,KAAK,CAAC,QAAQ;oBAChC,iBAAiB,EAAE,KAAK,CAAC,SAAS;oBAClC,yBAAyB,EAAE,CAAA,MAAA,UAAU,CAAC,CAAC,CAAC,0CAAE,KAAK,KAAI,KAAK,CAAC,OAAO;oBAChE,sBAAsB,EAAE,MAAA,UAAU,CAAC,CAAC,CAAC,0CAAE,IAAI;oBAC3C,YAAY,EAAE,KAAK,CAAC,IAAI;oBACxB,MAAM,EAAE,KAAK,CAAC,KAAK;iBACtB,CAAA;gBAED,IAAI,YAAY,IAAI,SAAS;oBACzB,IAAI,CAAC,aAAa,CAAC;wBACf,CAAC,MAAM,IAAI,kCAAkC,CAAC;4BAC9C,YAAY;4BACZ,mBAAmB;4BACnB,SAAS;4BACT,SAAS;4BACT,KAAK,CAAC,QAAQ,CAAA;gBACtB,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAA;gBACpC,OAAO,KAAK,CAAA;YAChB,CAAC,CAAC,CAAA;QACN,CAAC,CAAA;IACL,CAAC;IACL,wBAAC;AAAD,CAAC,AA5ED,IA4EC","sourcesContent":["/**\n * Integrate Sentry with PostHog. This will add a direct link to the person in Sentry, and an $exception event in PostHog\n *\n * ### Usage\n *\n *     Sentry.init({\n *          dsn: 'https://example',\n *          integrations: [\n *              new posthog.SentryIntegration(posthog)\n *          ]\n *     })\n *\n * @param {Object} [posthog] The posthog object\n * @param {string} [organization] Optional: The Sentry organization, used to send a direct link from PostHog to Sentry\n * @param {Number} [projectId] Optional: The Sentry project id, used to send a direct link from PostHog to Sentry\n * @param {string} [prefix] Optional: Url of a self-hosted sentry instance (default: https://sentry.io/organizations/)\n */\n\nimport { PostHog } from '../posthog-core'\n\n// NOTE - we can't import from @sentry/types because it changes frequently and causes clashes\n// We only use a small subset of the types, so we can just define the integration overall and use any for the rest\n\n// import {\n//     Event as _SentryEvent,\n//     EventProcessor as _SentryEventProcessor,\n//     Hub as _SentryHub,\n//     Integration as _SentryIntegration,\n//     SeverityLevel as _SeverityLevel,\n// } from '@sentry/types'\n\n// Uncomment the above and comment the below to get type checking for development\n\ntype _SentryEvent = any\ntype _SentryEventProcessor = any\ntype _SentryHub = any\n\ninterface _SentryIntegration {\n    name: string\n    setupOnce(addGlobalEventProcessor: (callback: _SentryEventProcessor) => void, getCurrentHub: () => _SentryHub): void\n}\n\n// levels copied from Sentry to avoid relying on a frequently changing @sentry/types dependency\n// but provided as an array of literal types, so we can constrain the level below\nconst severityLevels = ['fatal', 'error', 'warning', 'log', 'info', 'debug'] as const\ndeclare type _SeverityLevel = typeof severityLevels[number]\n\ninterface SentryExceptionProperties {\n    $sentry_event_id: any\n    $sentry_exception: any\n    $sentry_exception_message: any\n    $sentry_exception_type: any\n    $sentry_tags: any\n    $sentry_url?: string\n}\n\nexport class SentryIntegration implements _SentryIntegration {\n    name: string\n\n    setupOnce: (\n        addGlobalEventProcessor: (callback: _SentryEventProcessor) => void,\n        getCurrentHub: () => _SentryHub\n    ) => void\n\n    constructor(\n        _posthog: PostHog,\n        organization?: string,\n        projectId?: number,\n        prefix?: string,\n        /**\n         * By default, only errors are sent to PostHog. You can set this to '*' to send all events.\n         * Or to an error of SeverityLevel to only send events matching the provided levels.\n         * e.g. ['error', 'fatal'] to send only errors and fatals\n         * e.g. ['error'] to send only errors -- the default when omitted\n         * e.g. '*' to send all events\n         */\n        severityAllowList: _SeverityLevel[] | '*' = ['error']\n    ) {\n        // setupOnce gets called by Sentry when it intializes the plugin\n        this.name = 'posthog-js'\n        this.setupOnce = function (addGlobalEventProcessor: (callback: _SentryEventProcessor) => void) {\n            addGlobalEventProcessor((event: _SentryEvent) => {\n                const shouldProcessLevel =\n                    severityAllowList === '*' || severityAllowList.includes(event.level as _SeverityLevel)\n                if (!shouldProcessLevel || !_posthog.__loaded) return event\n                if (!event.tags) event.tags = {}\n\n                const personUrl = _posthog.requestRouter.endpointFor(\n                    'ui',\n                    `/project/${_posthog.config.token}/person/${_posthog.get_distinct_id()}`\n                )\n                event.tags['PostHog Person URL'] = personUrl\n                if (_posthog.sessionRecordingStarted()) {\n                    event.tags['PostHog Recording URL'] = _posthog.get_session_replay_url({ withTimestamp: true })\n                }\n\n                const exceptions = event.exception?.values || []\n\n                const data: SentryExceptionProperties & {\n                    // two properties added to match any exception auto-capture\n                    // added manually to avoid any dependency on the lazily loaded content\n                    $exception_message: any\n                    $exception_type: any\n                    $exception_personURL: string\n                    $level: _SeverityLevel\n                } = {\n                    // PostHog Exception Properties,\n                    $exception_message: exceptions[0]?.value || event.message,\n                    $exception_type: exceptions[0]?.type,\n                    $exception_personURL: personUrl,\n                    // Sentry Exception Properties\n                    $sentry_event_id: event.event_id,\n                    $sentry_exception: event.exception,\n                    $sentry_exception_message: exceptions[0]?.value || event.message,\n                    $sentry_exception_type: exceptions[0]?.type,\n                    $sentry_tags: event.tags,\n                    $level: event.level,\n                }\n\n                if (organization && projectId)\n                    data['$sentry_url'] =\n                        (prefix || 'https://sentry.io/organizations/') +\n                        organization +\n                        '/issues/?project=' +\n                        projectId +\n                        '&query=' +\n                        event.event_id\n                _posthog.capture('$exception', data)\n                return event\n            })\n        }\n    }\n}\n"]}