import { SURVEYS } from './constants';
import { isUrlMatchingRegex } from './utils/request-utils';
import { window, document, assignableWindow } from './utils/globals';
import { loadScript } from './utils';
import { logger } from './utils/logger';
export var surveyUrlValidationMap = {
    icontains: function (conditionsUrl) {
        return !!window && window.location.href.toLowerCase().indexOf(conditionsUrl.toLowerCase()) > -1;
    },
    regex: function (conditionsUrl) { return !!window && isUrlMatchingRegex(window.location.href, conditionsUrl); },
    exact: function (conditionsUrl) { return (window === null || window === void 0 ? void 0 : window.location.href) === conditionsUrl; },
};
var PostHogSurveys = /** @class */ (function () {
    function PostHogSurveys(instance) {
        this.instance = instance;
    }
    PostHogSurveys.prototype.afterDecideResponse = function (response) {
        this._decideServerResponse = !!response['surveys'];
        this.loadIfEnabled();
    };
    PostHogSurveys.prototype.loadIfEnabled = function () {
        var _this = this;
        var surveysGenerator = assignableWindow === null || assignableWindow === void 0 ? void 0 : assignableWindow.extendPostHogWithSurveys;
        if (!this.instance.config.disable_surveys && this._decideServerResponse && !surveysGenerator) {
            loadScript(this.instance.requestRouter.endpointFor('assets', '/static/surveys.js'), function (err) {
                if (err) {
                    return logger.error("Could not load surveys script", err);
                }
                assignableWindow.extendPostHogWithSurveys(_this.instance);
            });
        }
    };
    PostHogSurveys.prototype.getSurveys = function (callback, forceReload) {
        var _this = this;
        if (forceReload === void 0) { forceReload = false; }
        // In case we manage to load the surveys script, but config says not to load surveys
        // then we shouldn't return survey data
        if (this.instance.config.disable_surveys) {
            return callback([]);
        }
        var existingSurveys = this.instance.get_property(SURVEYS);
        if (!existingSurveys || forceReload) {
            this.instance._send_request({
                url: this.instance.requestRouter.endpointFor('api', "/api/surveys/?token=".concat(this.instance.config.token)),
                method: 'GET',
                transport: 'XHR',
                callback: function (response) {
                    var _a;
                    var _b;
                    if (response.statusCode !== 200 || !response.json) {
                        return callback([]);
                    }
                    var surveys = response.json.surveys || [];
                    (_b = _this.instance.persistence) === null || _b === void 0 ? void 0 : _b.register((_a = {}, _a[SURVEYS] = surveys, _a));
                    return callback(surveys);
                },
            });
        }
        else {
            return callback(existingSurveys);
        }
    };
    PostHogSurveys.prototype.getActiveMatchingSurveys = function (callback, forceReload) {
        var _this = this;
        if (forceReload === void 0) { forceReload = false; }
        this.getSurveys(function (surveys) {
            var activeSurveys = surveys.filter(function (survey) {
                return !!(survey.start_date && !survey.end_date);
            });
            var conditionMatchedSurveys = activeSurveys.filter(function (survey) {
                var _a, _b, _c, _d;
                if (!survey.conditions) {
                    return true;
                }
                // use urlMatchType to validate url condition, fallback to contains for backwards compatibility
                var urlCheck = ((_a = survey.conditions) === null || _a === void 0 ? void 0 : _a.url)
                    ? surveyUrlValidationMap[(_c = (_b = survey.conditions) === null || _b === void 0 ? void 0 : _b.urlMatchType) !== null && _c !== void 0 ? _c : 'icontains'](survey.conditions.url)
                    : true;
                var selectorCheck = ((_d = survey.conditions) === null || _d === void 0 ? void 0 : _d.selector)
                    ? document === null || document === void 0 ? void 0 : document.querySelector(survey.conditions.selector)
                    : true;
                return urlCheck && selectorCheck;
            });
            var targetingMatchedSurveys = conditionMatchedSurveys.filter(function (survey) {
                if (!survey.linked_flag_key && !survey.targeting_flag_key) {
                    return true;
                }
                var linkedFlagCheck = survey.linked_flag_key
                    ? _this.instance.featureFlags.isFeatureEnabled(survey.linked_flag_key)
                    : true;
                var targetingFlagCheck = survey.targeting_flag_key
                    ? _this.instance.featureFlags.isFeatureEnabled(survey.targeting_flag_key)
                    : true;
                return linkedFlagCheck && targetingFlagCheck;
            });
            return callback(targetingMatchedSurveys);
        }, forceReload);
    };
    return PostHogSurveys;
}());
export { PostHogSurveys };
//# sourceMappingURL=posthog-surveys.js.map